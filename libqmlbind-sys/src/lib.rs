/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_application {
}
impl ::std::default::Default for qmlbind_application {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_engine {
}
impl ::std::default::Default for qmlbind_engine {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_component {
}
impl ::std::default::Default for qmlbind_component {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_plugin {
}
impl ::std::default::Default for qmlbind_plugin {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_value {
}
impl ::std::default::Default for qmlbind_value {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_iterator {
}
impl ::std::default::Default for qmlbind_iterator {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_string {
}
impl ::std::default::Default for qmlbind_string {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_metaclass {
}
impl ::std::default::Default for qmlbind_metaclass {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_signal_emitter {
}
impl ::std::default::Default for qmlbind_signal_emitter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_client_object {
}
impl ::std::default::Default for qmlbind_client_object {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_client_class {
}
impl ::std::default::Default for qmlbind_client_class {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct qmlbind_client_callbacks {
    pub new_object: ::std::option::Option<unsafe extern "C" fn(classRef:
                                                                   *mut qmlbind_client_class,
                                                               signalEmitter:
                                                                   *mut qmlbind_signal_emitter)
                                              -> *mut qmlbind_client_object>,
    pub delete_object: ::std::option::Option<unsafe extern "C" fn(object:
                                                                      *mut qmlbind_client_object)>,
    pub call_method: ::std::option::Option<unsafe extern "C" fn(engine:
                                                                    *mut qmlbind_engine,
                                                                object:
                                                                    *mut qmlbind_client_object,
                                                                name:
                                                                    *const ::std::os::raw::c_char,
                                                                argc:
                                                                    ::std::os::raw::c_int,
                                                                argv:
                                                                    *const *const qmlbind_value)
                                               -> *mut qmlbind_value>,
    pub get_property: ::std::option::Option<unsafe extern "C" fn(engine:
                                                                     *mut qmlbind_engine,
                                                                 object:
                                                                     *mut qmlbind_client_object,
                                                                 name:
                                                                     *const ::std::os::raw::c_char)
                                                -> *mut qmlbind_value>,
    pub set_property: ::std::option::Option<unsafe extern "C" fn(engine:
                                                                     *mut qmlbind_engine,
                                                                 object:
                                                                     *mut qmlbind_client_object,
                                                                 name:
                                                                     *const ::std::os::raw::c_char,
                                                                 value:
                                                                     *const qmlbind_value)>,
}
impl ::std::default::Default for qmlbind_client_callbacks {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct __mbstate_t {
    pub _bindgen_data_: [u64; 16usize],
}
impl __mbstate_t {
    pub unsafe fn __mbstate8(&mut self)
     -> *mut [::std::os::raw::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
impl ::std::default::Default for __darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for _opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for _opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for _opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::default::Default for _opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
impl ::std::clone::Clone for _opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
impl ::std::default::Default for _opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
impl ::std::clone::Clone for _opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for _opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type clock_t = __darwin_clock_t;
pub type size_t = usize;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
    pub static mut getdate_err: ::std::os::raw::c_int;
    pub static mut timezone: ::std::os::raw::c_long;
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn qmlbind_application_new(argc: ::std::os::raw::c_int,
                                   argv: *const *const ::std::os::raw::c_char)
     -> *mut qmlbind_application;
    pub fn qmlbind_application_instance() -> *mut qmlbind_application;
    pub fn qmlbind_application_release(self_: *mut qmlbind_application);
    pub fn qmlbind_application_exec(self_: *mut qmlbind_application)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_application_exit(returnCode: ::std::os::raw::c_int);
    pub fn qmlbind_process_events();
    pub fn qmlbind_next_tick(callback:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut ::std::os::raw::c_void)>,
                             data: *mut ::std::os::raw::c_void);
    pub fn qmlbind_component_new(engine: *mut qmlbind_engine)
     -> *mut qmlbind_component;
    pub fn qmlbind_component_release(self_: *mut qmlbind_component);
    pub fn qmlbind_component_load_path(self_: *mut qmlbind_component,
                                       path: *const ::std::os::raw::c_char);
    pub fn qmlbind_component_load_url(self_: *mut qmlbind_component,
                                      url: *const ::std::os::raw::c_char);
    pub fn qmlbind_component_set_data(self_: *mut qmlbind_component,
                                      data: *const ::std::os::raw::c_char,
                                      path: *const ::std::os::raw::c_char);
    pub fn qmlbind_component_get_error_string(self_: *mut qmlbind_component)
     -> *mut qmlbind_string;
    pub fn qmlbind_component_create(self_: *mut qmlbind_component)
     -> *mut qmlbind_value;
    pub fn qmlbind_engine_new() -> *mut qmlbind_engine;
    pub fn qmlbind_engine_release(self_: *mut qmlbind_engine);
    pub fn qmlbind_engine_eval(self_: *mut qmlbind_engine,
                               str: *const ::std::os::raw::c_char,
                               fileName: *const ::std::os::raw::c_char,
                               lineNumber: ::std::os::raw::c_int)
     -> *mut qmlbind_value;
    pub fn qmlbind_engine_get_global_object(self_: *const qmlbind_engine)
     -> *mut qmlbind_value;
    pub fn qmlbind_engine_new_object(self_: *mut qmlbind_engine)
     -> *mut qmlbind_value;
    pub fn qmlbind_engine_new_array(self_: *mut qmlbind_engine,
                                    length: ::std::os::raw::c_int)
     -> *mut qmlbind_value;
    pub fn qmlbind_engine_new_wrapper(self_: *mut qmlbind_engine,
                                      metaclass: *const qmlbind_metaclass,
                                      object: *mut qmlbind_client_object)
     -> *mut qmlbind_value;
    pub fn qmlbind_engine_add_import_path(self_: *mut qmlbind_engine,
                                          path:
                                              *const ::std::os::raw::c_char);
    pub fn qmlbind_engine_collect_garbage(self_: *mut qmlbind_engine);
    pub fn qmlbind_metaclass_new(classObject: *mut qmlbind_client_class,
                                 className: *const ::std::os::raw::c_char,
                                 callbacks: qmlbind_client_callbacks)
     -> *mut qmlbind_metaclass;
    pub fn qmlbind_metaclass_release(self_: *mut qmlbind_metaclass);
    pub fn qmlbind_metaclass_add_method(self_: *mut qmlbind_metaclass,
                                        name: *const ::std::os::raw::c_char,
                                        arity: ::std::os::raw::c_int);
    pub fn qmlbind_metaclass_add_signal(self_: *mut qmlbind_metaclass,
                                        name: *const ::std::os::raw::c_char,
                                        arity: ::std::os::raw::c_int,
                                        params:
                                            *const *const ::std::os::raw::c_char);
    pub fn qmlbind_metaclass_add_property(self_: *mut qmlbind_metaclass,
                                          name: *const ::std::os::raw::c_char,
                                          notifierSignal:
                                              *const ::std::os::raw::c_char);
    pub fn qmlbind_metaclass_register(self_: *const qmlbind_metaclass,
                                      uri: *const ::std::os::raw::c_char,
                                      versionMajor: ::std::os::raw::c_int,
                                      versionMinor: ::std::os::raw::c_int,
                                      qmlName: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_iterator_new(object: *const qmlbind_value)
     -> *mut qmlbind_iterator;
    pub fn qmlbind_iterator_release(self_: *mut qmlbind_iterator);
    pub fn qmlbind_iterator_get_key(self_: *const qmlbind_iterator)
     -> *mut qmlbind_string;
    pub fn qmlbind_iterator_get_value(self_: *const qmlbind_iterator)
     -> *mut qmlbind_value;
    pub fn qmlbind_iterator_next(self_: *mut qmlbind_iterator);
    pub fn qmlbind_iterator_has_next(self_: *const qmlbind_iterator)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_plugin_new(filename: *const ::std::os::raw::c_char)
     -> *mut qmlbind_plugin;
    pub fn qmlbind_plugin_release(self_: *mut qmlbind_plugin);
    pub fn qmlbind_plugin_get_error_string(self_: *mut qmlbind_plugin)
     -> *mut qmlbind_string;
    pub fn qmlbind_plugin_get_instance(self_: *mut qmlbind_plugin,
                                       engine: *mut qmlbind_engine)
     -> *mut qmlbind_value;
    pub fn qmlbind_signal_emitter_new(wrapper: *const qmlbind_value)
     -> *mut qmlbind_signal_emitter;
    pub fn qmlbind_signal_emitter_emit(self_: *mut qmlbind_signal_emitter,
                                       signal_name:
                                           *const ::std::os::raw::c_char,
                                       argc: ::std::os::raw::c_int,
                                       argv: *const *const qmlbind_value);
    pub fn qmlbind_signal_emitter_get_engine(self_:
                                                 *const qmlbind_signal_emitter)
     -> *mut qmlbind_engine;
    pub fn qmlbind_signal_emitter_release(self_: *mut qmlbind_signal_emitter);
    pub fn qmlbind_string_get_chars(self_: *const qmlbind_string)
     -> *const ::std::os::raw::c_char;
    pub fn qmlbind_string_get_length(self_: *const qmlbind_string)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_string_release(self_: *mut qmlbind_string);
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
    pub fn clock() -> clock_t;
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
    pub fn difftime(arg1: time_t, arg2: time_t) -> ::std::os::raw::c_double;
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
    pub fn localtime(arg1: *const time_t) -> *mut tm;
    pub fn mktime(arg1: *mut tm) -> time_t;
    pub fn strftime(arg1: *mut ::std::os::raw::c_char, arg2: size_t,
                    arg3: *const ::std::os::raw::c_char, arg4: *const tm)
     -> size_t;
    pub fn strptime(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, arg3: *mut tm)
     -> *mut ::std::os::raw::c_char;
    pub fn time(arg1: *mut time_t) -> time_t;
    pub fn tzset();
    pub fn asctime_r(arg1: *const tm, arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn ctime_r(arg1: *const time_t, arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
    pub fn posix2time(arg1: time_t) -> time_t;
    pub fn tzsetwall();
    pub fn time2posix(arg1: time_t) -> time_t;
    pub fn timelocal(arg1: *mut tm) -> time_t;
    pub fn timegm(arg1: *mut tm) -> time_t;
    pub fn nanosleep(arg1: *const timespec, arg2: *mut timespec)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_new_undefined() -> *mut qmlbind_value;
    pub fn qmlbind_value_new_null() -> *mut qmlbind_value;
    pub fn qmlbind_value_release(self_: *mut qmlbind_value);
    pub fn qmlbind_value_clone(other: *const qmlbind_value)
     -> *mut qmlbind_value;
    pub fn qmlbind_value_is_equal(value1: *const qmlbind_value,
                                  value2: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_is_identical(value1: *const qmlbind_value,
                                      value2: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_is_undefined(self_: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_is_null(self_: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_is_boolean(self_: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_is_number(self_: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_is_string(self_: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_is_object(self_: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_is_array(self_: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_is_function(self_: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_is_error(self_: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_is_wrapper(self_: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_new_boolean(value: ::std::os::raw::c_int)
     -> *mut qmlbind_value;
    pub fn qmlbind_value_get_boolean(self_: *const qmlbind_value)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_new_number(value: ::std::os::raw::c_double)
     -> *mut qmlbind_value;
    pub fn qmlbind_value_get_number(self_: *const qmlbind_value)
     -> ::std::os::raw::c_double;
    pub fn qmlbind_value_new_string(length: ::std::os::raw::c_int,
                                    value: *const ::std::os::raw::c_char)
     -> *mut qmlbind_value;
    pub fn qmlbind_value_new_string_cstr(value: *const ::std::os::raw::c_char)
     -> *mut qmlbind_value;
    pub fn qmlbind_value_get_string(self_: *const qmlbind_value)
     -> *mut qmlbind_string;
    pub fn qmlbind_value_get_property(self_: *const qmlbind_value,
                                      key: *const ::std::os::raw::c_char)
     -> *mut qmlbind_value;
    pub fn qmlbind_value_set_property(self_: *mut qmlbind_value,
                                      key: *const ::std::os::raw::c_char,
                                      value: *const qmlbind_value);
    pub fn qmlbind_value_delete_property(self_: *mut qmlbind_value,
                                         key: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_has_property(self_: *const qmlbind_value,
                                      key: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_has_own_property(self_: *const qmlbind_value,
                                          key: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_get_prototype(self_: *const qmlbind_value)
     -> *mut qmlbind_value;
    pub fn qmlbind_value_set_prototype(self_: *mut qmlbind_value,
                                       proto: *const qmlbind_value);
    pub fn qmlbind_value_has_index(self_: *const qmlbind_value,
                                   index: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn qmlbind_value_get_array_item(self_: *const qmlbind_value,
                                        index: ::std::os::raw::c_int)
     -> *mut qmlbind_value;
    pub fn qmlbind_value_set_array_item(self_: *mut qmlbind_value,
                                        index: ::std::os::raw::c_int,
                                        property: *const qmlbind_value);
    pub fn qmlbind_value_call(self_: *mut qmlbind_value,
                              argc: ::std::os::raw::c_int,
                              argv: *const *const qmlbind_value)
     -> *mut qmlbind_value;
    pub fn qmlbind_value_call_constructor(function: *mut qmlbind_value,
                                          argc: ::std::os::raw::c_int,
                                          argv: *const *const qmlbind_value)
     -> *mut qmlbind_value;
    pub fn qmlbind_value_call_with_instance(self_: *mut qmlbind_value,
                                            instance: *mut qmlbind_value,
                                            argc: ::std::os::raw::c_int,
                                            argv: *const *const qmlbind_value)
     -> *mut qmlbind_value;
    pub fn qmlbind_value_unwrap(self_: *const qmlbind_value)
     -> *mut qmlbind_client_object;
}
